#!/usr/bin/env python
import argparse
import json


def make_genesis_block(gas_limit, addresses):
    coinbase = addresses[0].replace("0x", "")
    return {
        "config": {
            "chainId": 1337,
            "homesteadBlock": 0,
            "eip150Block": 0,
            "eip155Block": 0,
            "eip158Block": 0,
            "byzantiumBlock": 0,
            "constantinopleBlock": 0,
            "petersburgBlock": 0,
            "istanbulBlock": 0,
            "berlinBlock": 0,
            "londonBlock": 0,
            # clique is required for instant mining
            "clique": {"period": 0, "epoch": 30000},
        },
        "alloc": {
            address: {
                "balance": "0x200000000000000000000000000000000000000000000000000000000000000"
            }
            for address in addresses
        },
        "coinbase": "0x0000000000000000000000000000000000000000",
        "difficulty": "0x1",
        # Custom extradata is required to start geth if `clique` is used in config
        "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000"
        + coinbase
        + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "gasLimit": hex(gas_limit),
        "nonce": "0x0000000000000042",
        "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "timestamp": "0x00",
    }


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Generate a genesis block and print it to stdout"
    )
    parser.add_argument(
        "--gas-limit",
        "-g",
        default=30_000_000,
    )
    parser.add_argument(
        "--addresses",
        "-a",
        type=lambda s: [item for item in s.strip().split(",") if item],
        required=True,
        help="Comma separated list of addresses to fund 0xa...,0xb...",
    )
    args = parser.parse_args()
    genesis = make_genesis_block(args.gas_limit, args.addresses)
    print(json.dumps(genesis, indent=4))
